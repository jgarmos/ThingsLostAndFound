@{string mapsKey = System.Configuration.ConfigurationManager.AppSettings["MapsKey"]; } @* Read the MapsKey value from a config file out of my project, so avoid to upload this inromation to GitHub*@

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=@mapsKey"></script>

@*@model ThingsLostAndFound.Models.InfoMarkerFoundObject*@
@model IEnumerable<ThingsLostAndFound.Models.InfoMarkerFoundObject>
@using System.Threading;
@using System.Globalization;

@{
    ViewBag.Title = "Found Objects Map";
    Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US"); //for change , by . in Lat and Log
}

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Found Objects Map</title>
</head>
<body>
    <h2>Found Object Map</h2>
    <div> 

        <div id="map_canvas" style="height: 500px; width: 700px;"></div>

    </div>
</body>
</html>

<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: red;
    }
</style>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">        var map;
        var marker;
        var markers =[];
        initMap();
        showMarkers();
        //showMarkers2();
        //showMarkers3();

        function initMap() {
            var centerPosition = new google.maps.LatLng(55.942071, -3.200165);
            var options = {
                zoom: 11,
                center: centerPosition,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map($('#map_canvas')[0], options);

            if (navigator.geolocation) //center the map in user location
            {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    map.setCenter(pos);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                                  'Error: The Geolocation service failed.' :
                                  'Error: Your browser doesn\'t support geolocation.');
        }

        function showMarkers() {
            var bounds = new google.maps.LatLngBounds();
            var infoWindow = new google.maps.InfoWindow({ content: "Loading..." });
            var i = 0;
            @foreach (var marker in Model)
            {
            <text>
                var point = new google.maps.LatLng(@marker.Latitude, @marker.Longitude);
                bounds.extend(point);
                infowindow = new google.maps.InfoWindow({
                    content: "<div><h2>  @marker.Title </h2>" +
                    "@marker.Category" + "<p>" + "@marker.Address"+"</div>"
                });
                //var marker'i';
                marker = new google.maps.Marker({
                    position: point,
                    map: map,
                    title: '@marker.Title',
                    icon:'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                    html: infowindow
                });

                //google.maps.event.addListener(marker, 'click', function () {
                //    infowindow.setContent(this.html);
                //    infowindow.open(map, this);
                //});
                markers.push(marker);
            </text>
            }
            var j=0;
            for (j = 0; j < markers.length; j++) {
                google.maps.event.addListener(markers[j], 'click', function () {
                    infowindow.setContent("test");
                    infowindow.open(map, markers[j]);
                });
            }

            //map.fitBounds(bounds);
        }

        function showMarkers2() {
            var bounds = new google.maps.LatLngBounds();
            var infoWindow = new google.maps.InfoWindow({ content: "Loading..." });
            var i = 0;
            var la = [];
            var lo = [];
            var titles = [];
            var address = [];
            var category = [];
            @foreach (var marker in Model)
            {
            <text>
            la.push(@marker.Latitude);
            lo.push(@marker.Longitude);
            titles.push("@marker.Title");
            category.push("@marker.Category");
            address.push("@marker.Address");
            </text>
            }


            var point = new google.maps.LatLng(la[0], lo[0]);
            bounds.extend(point);
            infowindow = new google.maps.InfoWindow({
                content: "<div><h2>"+  titles[0] + "</h2>" +
                category[0] + "<p>" + address[0] +"</div>"
            });
            marker = new google.maps.Marker({
                position: point,
                map: map,
                title: titles[0],
                icon:'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                html: infowindow
            });
            google.maps.event.addListener(marker, 'click', function () {
                //infowindow.setContent(this.html);
                infowindow.open(map, marker);
            });

            var point = new google.maps.LatLng(la[1], lo[1]);
            bounds.extend(point);
            infowindow2 = new google.maps.InfoWindow({
                content: "<div><h2>"+  titles[1] + "</h2>" +
                category[1] + "<p>" + address[1] +"</div>"
            });
            marker2 = new google.maps.Marker({
                position: point,
                map: map,
                title: titles[1],
                icon:'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                html: infowindow
            });
            google.maps.event.addListener(marker2, 'click', function () {
                //infowindow2.setContent(marker2.html);
                infowindow2.open(map, marker2);
            });
            
            
        }

        function showMarkers3() {
            var bounds = new google.maps.LatLngBounds();
            var infoWindow = new google.maps.InfoWindow({ content: "Loading..." });
            var i = 0;
            var la = [];
            var lo = [];
            var titles = [];
            var address = [];
            var category = [];

            @foreach (var marker in Model)
            {
                <text>
                la.push(@marker.Latitude);
                lo.push(@marker.Longitude);
                titles.push("@marker.Title");
                category.push("@marker.Category");
                address.push("@marker.Address");
                var point = new google.maps.LatLng(@marker.Latitude, @marker.Longitude);
                infowindow = new google.maps.InfoWindow({
                    content: "<div><h2>"+  titles[0] + "</h2>" +
                    category[0] + "<p>" + address[0] +"</div>"
                });
                marker = new google.maps.Marker({
                    position: point,
                    map: map,
                    title: titles[0],
                    icon:'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                    html: infowindow
                });
            
                </text>
            }

            bounds.extend(point);
        }

    </script>
    }
